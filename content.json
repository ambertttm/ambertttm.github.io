{"meta":{"title":"TQW","subtitle":null,"description":null,"author":"tqwttm","url":"ambertttm.github.io"},"pages":[{"title":"About","date":"2016-09-08T02:20:33.000Z","updated":"2016-09-08T02:23:14.114Z","comments":true,"path":"about/index.html","permalink":"ambertttm.github.io/about/index.html","excerpt":"","text":"平日不修善果 只爱杀人放火 忽地顿开金绳 这里扯断玉锁 钱塘江上潮信来 今日方知我是我"}],"posts":[{"title":"JAVA记录(2)","slug":"about-java-01","date":"2016-10-19T06:55:46.834Z","updated":"2016-10-19T08:01:47.713Z","comments":false,"path":"2016/10/19/about-java-01/","link":"","permalink":"ambertttm.github.io/2016/10/19/about-java-01/","excerpt":"本记录解决window7下，已知汉字GBK编码，使用JAVA输出汉字的方法。","text":"本记录解决window7下，已知汉字GBK编码，使用JAVA输出汉字的方法。 代码如下： cur_gbk_label = &quot;b0a1&quot;; byte[] buf = new byte[2]; buf[0] = (byte)Integer.parseInt(cur_gbk_label.substring(0, 2), 16); buf[1] = (byte)Integer.parseInt(cur_gbk_label.substring(2, 4), 16); System.out.print(new String(buf, &quot;GBK&quot;)); 采用这种方法即可在Eclipse的Console中显示出汉字。","categories":[],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"ambertttm.github.io/tags/JAVA/"},{"name":"clustering","slug":"clustering","permalink":"ambertttm.github.io/tags/clustering/"}],"keywords":[]},{"title":"Python记录(2)","slug":"about-python-2","date":"2016-10-19T01:38:40.430Z","updated":"2016-10-20T06:46:08.030Z","comments":false,"path":"2016/10/19/about-python-2/","link":"","permalink":"ambertttm.github.io/2016/10/19/about-python-2/","excerpt":"使用python时遇到的一些问题和解决办法。","text":"使用python时遇到的一些问题和解决办法。 逐行打乱txt文件内容import random with open(&apos;path to your file&apos;, mode = &apos;r&apos;) as myfile: lines = list(myfile) random.shuffle(lines) write_to = open(&apos;path to your new file&apos;, &apos;w&apos;) for i in range(len(lines)): write_to.write(lines[i]) write_to.close() python中若干聚类方法的使用数据存于文本文件中，一行代表一个样本，每维的特征值之间以单个空格间隔。 import sklearn.cluster as cluster import numpy import networkx import matplotlib.pyplot as plt # main procedure if __name__ == &quot;__main__&quot;: # algorithm names and parameter settings clustering_configs = [ # K-Means [&apos;KMeans&apos;, {&apos;n_clusters&apos; : 5}], # Ward [&apos;AgglomerativeClustering&apos;, { &apos;n_clusters&apos; : 5, &apos;linkage&apos; : &apos;ward&apos; }], # DBSCAN [&apos;DBSCAN&apos;, {&apos;eps&apos; : 0.15}] ] # load data from standard input data = open(&quot;path to your file&quot;,&quot;r&quot;) data=data.readlines() X=[] for line in data: x1, x2 = line.strip().split() X.append([float(x1), float(x2[:-2])]) X = numpy.array(X) clustering_results = {} for alg_name, alg_params in clustering_configs: class_ = getattr(cluster, alg_name) if alg_name == &apos;KMeans&apos;: instance_= class_(n_clusters = alg_params.get(&apos;n_clusters&apos;)) if alg_name == &apos;AgglomerativeClustering&apos;: instance_= class_(n_clusters = alg_params.get(&apos;n_clusters&apos;), linkage = alg_params.get(&apos;linkage&apos;)) if alg_name == &apos;DBSCAN&apos;: instance_ = class_(eps = alg_params.get(&apos;eps&apos;)) s = instance_.fit(X) clustering_results[alg_name] = instance_.fit_predict(X) # number of data points n = X.shape[0] G = networkx.Graph() for i in xrange(n): for j in xrange(i+1, n): count = 0 for results in clustering_results.values(): if results[i] == results[j]: count = count + 1 if count == len(clustering_results): G.add_edge(i, j) # assgin cluster labels to data points class_label = 0 clustering_results[&apos;Meta&apos;] = numpy.zeros((n,)) for connected_component in networkx.connected_components(G): for i in connected_component: clustering_results[&apos;Meta&apos;][i] = class_label class_label = class_label + 1 # plot the results plt.subplot(221) plt.scatter(X[:, 0], X[:, 1], c=clustering_results[&apos;KMeans&apos;]) plt.title(&quot;KMeans&quot;) plt.subplot(222) plt.scatter(X[:, 0], X[:, 1], c=clustering_results[&apos;AgglomerativeClustering&apos;]) plt.title(&quot;Ward&quot;) plt.subplot(223) plt.scatter(X[:, 0], X[:, 1], c=clustering_results[&apos;DBSCAN&apos;]) plt.title(&quot;DBSCAN&quot;) plt.subplot(224) plt.scatter(X[:, 0], X[:, 1], c=clustering_results[&apos;Meta&apos;]) plt.title(&quot;Meta&quot;) plt.show() python处理线性回归问题import sklearn.linear_model as sklinearm import numpy as np def impute(X): shape_info = X.shape sample_num, dim_num = shape_info train_sample = X[X[:, dim_num - 1] == X[:, dim_num - 1]] LRmodel = sklinearm.LinearRegression() train_data = train_sample[:, 0 : dim_num - 1] train_target = train_sample[:, dim_num - 1] LRmodel.fit(train_data, train_target) parameters = LRmodel.coef_ for i in range(sample_num): if X[i][dim_num - 1] != X[i][dim_num - 1]: X[i][dim_num - 1] = np.dot(X[i, 0 : dim_num - 1], parameters) return X if __name__ == &apos;__main__&apos;: X = np.array([[1, 2, 3, 6], [2, 4, 6, np.nan], [3, 6, 9, 12]]) print &quot;Before:\\n&quot;, X Y = impute(X) print &quot;After:\\n&quot;, Y 16进制字符串转16进制数字hex_str = &apos;0xb0a1&apos; hex_value = hex(eval(hex_str))","categories":[],"tags":[{"name":"clustering","slug":"clustering","permalink":"ambertttm.github.io/tags/clustering/"},{"name":"python","slug":"python","permalink":"ambertttm.github.io/tags/python/"}],"keywords":[]},{"title":"Python记录(1)","slug":"about-python-1","date":"2016-10-02T00:26:04.852Z","updated":"2016-10-20T06:20:03.488Z","comments":false,"path":"2016/10/02/about-python-1/","link":"","permalink":"ambertttm.github.io/2016/10/02/about-python-1/","excerpt":"推荐书目：Thinking in Python","text":"推荐书目：Thinking in Python 使用Python时注意几个问题： array，list与NumPy数组的区别和联系，以及各自用法 使Python程序高效快速：Python性能鸡汤,非常有效的提高性能的tips，Speeding Up Your Python Code pip安装的技巧仅为当前用户安装简单的pip install指令的安装需要root权限，实际上一个简单的处理手段即可避免，例如： pip install --user lmdb 在安装时，有时需要指定版本号，这个约束也很容易处理，例如 pip install --user protobuf==2.5.0 新建文件夹os.mkdir(path string) os.makedirs(path string) 逐字节读文件import struct file_need_to_be_read = open(path string, &apos;rb&apos;) example_value = struct.unpack(&apos;I&apos;, file_need_to_be_read.read(4))[0] 逐行读文件方法1f = open(&quot;your file.txt&quot;) line = f.readline() while line: print line line = f.readline() f.close() 方法2for line in open(&quot;your file.txt&quot;): print line 方法3f = open(&apos;your file.txt&apos;, &apos;r&apos;) lines = f.readlines() for line in lines: print line 十进制转十六进制hex_value = hex(dec_value) NumPy数组保存np.save(file path string, NumPy array name) 保存为.npy文件，除数据外文件头等所占空间为80字节 绘图在绘图时，输入和输出的对象往往均为NumPy类型的数组 from skimage import draw rr, cc = draw.line(begin point y, begin point x, end point y, end point x) img[rr, cc] = pixel_value 生成随机NumPy数组长度为10，[0, 1)之间均匀分布rand_array = numpy.random.random((size = (10, ))) 正态分布mu = 0 sigma = 0.1 rand_array = numpy.random.normal(mu, sigma, (10, ))","categories":[],"tags":[{"name":"python","slug":"python","permalink":"ambertttm.github.io/tags/python/"},{"name":"DIP","slug":"DIP","permalink":"ambertttm.github.io/tags/DIP/"}],"keywords":[]},{"title":"LaTeX记录-(1)","slug":"latex-rec0001","date":"2016-09-08T11:21:24.269Z","updated":"2016-10-02T00:58:24.989Z","comments":false,"path":"2016/09/08/latex-rec0001/","link":"","permalink":"ambertttm.github.io/2016/09/08/latex-rec0001/","excerpt":"Some tricks when using LaTeX.","text":"Some tricks when using LaTeX. 常见符号波浪线\\textasciitilde 参考文献基本配置在结束指令之前\\end{document}加入如下几行： \\renewcommand\\refname{reference} \\bibliographystyle{ieeetr} \\bibliography{Thesis} 参考文献列表在行文中： \\begin{thebibliography}{99} \\bibitem{takeshi} TAKESHI AGUI, et al. A Method of Recognition and Representation of Korean Characters by Tree Grammers. 1979. \\end{thebibliography} 在article文类下，此列表默认有数字标号，在beamer文类下，无默认数字编号，若希望加入，则在导言区添加\\setbeamertemplate{bibliography item}{\\insertbiblabel}","categories":[],"tags":[{"name":"tricks","slug":"tricks","permalink":"ambertttm.github.io/tags/tricks/"},{"name":"LaTeX","slug":"LaTeX","permalink":"ambertttm.github.io/tags/LaTeX/"}],"keywords":[]},{"title":"Linux记录-(1)","slug":"linux-rec0001","date":"2016-09-08T01:11:43.562Z","updated":"2016-10-02T00:58:24.990Z","comments":false,"path":"2016/09/08/linux-rec0001/","link":"","permalink":"ambertttm.github.io/2016/09/08/linux-rec0001/","excerpt":"Some tricks when using Linux OS.","text":"Some tricks when using Linux OS. 目录与文件数目统计统计当前文件夹下文件的数目ls -l | grep &quot;^-&quot; | wc -l 统计当前文件夹下目录的数目ls -l | grep &quot;^d&quot; | wc -l 统计当前文件夹下文件的个数，包括子文件夹内的ls -lR | grep &quot;^-&quot; | wc -l 统计文件夹下目录的个数，包括子文件夹内的ls -lR | grep &quot;^d&quot; | wc -l 说明：ls -l表示输出当前路径下所有目录和文件的信息，grep &quot;^-&quot;把长列表的输出信息过滤一部分，安装定好的规则保留，wc -l统计输出信息的行数。 Vim显示行号vim打开文件时显示行号 解决删除时Device or resource busy的问题执行： lsof +D /home/to/target/path 在屏幕输出中得到PID，执行： kill -s 9 pid-number 之后重新删除。","categories":[],"tags":[{"name":"tricks","slug":"tricks","permalink":"ambertttm.github.io/tags/tricks/"},{"name":"Linux","slug":"Linux","permalink":"ambertttm.github.io/tags/Linux/"}],"keywords":[]},{"title":"Chrome浏览器收藏夹整理","slug":"bookmark-dl","date":"2016-09-08T00:56:11.509Z","updated":"2016-10-02T00:58:24.989Z","comments":false,"path":"2016/09/08/bookmark-dl/","link":"","permalink":"ambertttm.github.io/2016/09/08/bookmark-dl/","excerpt":"My chrome browser’s bookmarks.","text":"My chrome browser’s bookmarks. DLcaffe深度学习网络relu层代码注释 Caffe源码（七）：ReLU，Sigmoid and Tanh RECURRENT NEURAL NETWORKS TUTORIAL, PART 1 – INTRODUCTION TO RNNS 本人常用资源整理(ing…) Caffe代码解析(4) Caffe源码解析之Blob 【Caffe】训练ImageNet模型 Caffe4——计算图像均值 Caffemodel解析 caffe代码阅读4：DataTransformer以及io的实现细节 Caffe学习系列(2)：数据层及参数 CAFFE中训练与使用阶段网络设计的不同_1 Caffe源码解析之Layer Caffe源码解析4 Data_layer What makes for effective detection proposals? caffe 实现多标签输入（multilabel、multitask 梳理caffe代码common(八) caffe——net.cpp——init（） caffe finetune问题：按照网上的教程微调alexnet为什么loss一直是87.3365？ caffe源码解析 — net.cpp caffe源码分析–data_layer.cpp 梳理caffe代码blob(三) Caffe 源码阅读 Blob caffe blob 数据存储 blob.ccp caffe源码解析 — caffe.proto 使用Caffe对图片进行训练并分类的简单流程 神经网络caffe框架源码解析Blob类代码研究 梳理caffe代码io（十三） Caffe学习笔记 Creating an LMDB database in Python Using Caffe for Sentiment Analysis 半小时torch教程 [译] 理解 LSTM 网络 Caffe fine-tuning 微调网络 caffe源码阅读——Blob类 caffe里的clip gradient是什么意思？ Extract weight matrix · Issue #91 theano - Keras 1.0: getting intermediate layer output FAQ - Keras Documentation deep learning - How to find Number of parameters of a keras model? Caffe 中LMDB接口处理多标签（Multi-Label）数据 Caffe中增加新的layer以及Caffe中triplet loss layer的实现 Semantic segmentation (with deconvolutional CNN) 作者公布源码和模型 MLAdaBoost–从原理到实现 决策树–从原理到实现 简易解说拉格朗日对偶（Lagrange duality） 拉格朗日乘子法和KKT条件 CV多尺度与多分辨率的理解 尺度空间理论 尺度空间（Scale space）理论 SIFT特征提取分析 论文阅读论文笔记 《OverFeat:Integrated Recognition, Localization and Detection using Convolutional Networks》 论文笔记 《Fast R-CNN》 software:overfeat:start DeepLearning 笔记（二） OverFeat: Integrated Recognition, Localization and Detection using Convolutional Networks 深度学习研究理解6:OverFeat:Integrated Recognition, Localization and Detection using Convolutional Networks 论文笔记：Faster R-CNN:Towards Real-Time Object Detection with Region Proposal Networks 论文阅读笔记：Fully Convolutional Networks for Semantic Segmentation other trickswindows下cmd命令行显示UTF8字符设置(CHCP命令) Python 2.7中使用raw_input输入中文时的编码转换 条件随机场 conditional random fields 及代码实现","categories":[],"tags":[{"name":"bookmarks","slug":"bookmarks","permalink":"ambertttm.github.io/tags/bookmarks/"},{"name":"tricks","slug":"tricks","permalink":"ambertttm.github.io/tags/tricks/"}],"keywords":[]},{"title":"使用Github与Hexo搭建博客","slug":"github-hexo-blog","date":"2016-09-01T13:07:16.817Z","updated":"2016-10-02T00:58:24.989Z","comments":false,"path":"2016/09/01/github-hexo-blog/","link":"","permalink":"ambertttm.github.io/2016/09/01/github-hexo-blog/","excerpt":"介绍如何搭建个人博客，系统Windows 7, 64bit。","text":"介绍如何搭建个人博客，系统Windows 7, 64bit。 准备工作node.js本机安装node.js，安装路径任意设置，无需其他设置。 Git Bash本机安装Git Bash，路径任意，无需其他设置。 Hexo打开Git Bash，执行Hexo安装命令： npm install -g hexo 为博客建立路径： cd d: mkdir hexoblog 进入博客目录： cd hexoblog 执行： hexo init 初始化完成整个博客架构。 Github设置建立repository登录Github，假设用户名为xxoo，进入个人的profile，进入Repositories，点击New，在默认框中输入xxoo.github.io，其他待填内容保持为默认即可，空白也无法，新建的repository的Branch选为master。 本地SSH key设置在Git Bash中，输入： ssh-keygen -t rsa -b 4096 -C &quot;your github account&apos;s registered email&quot; 按照提示完成，在系统C:/Users/your pc name/.ssh/下，拷贝文件id_rsa.pub中的内容。登录Github，进入Settings，进入SSH and GPG keys，点击New SSH Key，将拷贝好的内容复制，为此SSH key任意命名即可。 博客生成与部署安装部署器进入博客目录下，执行： npm install hexo-deployer-git --save npm install hexo-server --save 安装一系列所需工具。 _config.yml文件配置在博客目录下，打开_config.yml文件，deploy下套用以下内容： type: git repository: git@github.com:xxoo/xxoo.github.io.git branch: master 生成与部署在博客目录下，执行： hexo g 生成博客内容，之后执行： hexo d 部署博客。 在浏览器中访问https://ambertttm.github.io即可。","categories":[],"tags":[{"name":"Blog","slug":"Blog","permalink":"ambertttm.github.io/tags/Blog/"},{"name":"Hexo","slug":"Hexo","permalink":"ambertttm.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"ambertttm.github.io/tags/Github/"}],"keywords":[]}]}